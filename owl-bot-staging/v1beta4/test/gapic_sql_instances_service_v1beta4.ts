// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as sqlinstancesserviceModule from '../src';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v1beta4.SqlInstancesServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.sqlInstancesServiceStub, undefined);
        await client.initialize();
        assert(client.sqlInstancesServiceStub);
    });

    it('has close method', () => {
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('addServerCa', () => {
        it('invokes addServerCa without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesAddServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.addServerCa = stubSimpleCall(expectedResponse);
            const [response] = await client.addServerCa(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addServerCa without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesAddServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.addServerCa = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addServerCa(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes addServerCa with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesAddServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addServerCa = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.addServerCa(request), expectedError);
            assert((client.innerApiCalls.addServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('clone', () => {
        it('invokes clone without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCloneRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.clone = stubSimpleCall(expectedResponse);
            const [response] = await client.clone(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.clone as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes clone without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCloneRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.clone = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.clone(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.clone as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes clone with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCloneRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.clone = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.clone(request), expectedError);
            assert((client.innerApiCalls.clone as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('delete', () => {
        it('invokes delete without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDeleteRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.delete = stubSimpleCall(expectedResponse);
            const [response] = await client.delete(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.delete as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes delete without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDeleteRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.delete = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.delete(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.delete as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes delete with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDeleteRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.delete = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.delete(request), expectedError);
            assert((client.innerApiCalls.delete as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('demoteMaster', () => {
        it('invokes demoteMaster without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.demoteMaster = stubSimpleCall(expectedResponse);
            const [response] = await client.demoteMaster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.demoteMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes demoteMaster without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.demoteMaster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.demoteMaster(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.demoteMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes demoteMaster with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.demoteMaster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.demoteMaster(request), expectedError);
            assert((client.innerApiCalls.demoteMaster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('export', () => {
        it('invokes export without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesExportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.export = stubSimpleCall(expectedResponse);
            const [response] = await client.export(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.export as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes export without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesExportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.export = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.export(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.export as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes export with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesExportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.export = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.export(request), expectedError);
            assert((client.innerApiCalls.export as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('failover', () => {
        it('invokes failover without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesFailoverRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.failover = stubSimpleCall(expectedResponse);
            const [response] = await client.failover(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.failover as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes failover without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesFailoverRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.failover = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.failover(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.failover as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes failover with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesFailoverRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.failover = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.failover(request), expectedError);
            assert((client.innerApiCalls.failover as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('get', () => {
        it('invokes get without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesGetRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.DatabaseInstance());
            client.innerApiCalls.get = stubSimpleCall(expectedResponse);
            const [response] = await client.get(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes get without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesGetRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.DatabaseInstance());
            client.innerApiCalls.get = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.get(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IDatabaseInstance|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes get with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesGetRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.get = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.get(request), expectedError);
            assert((client.innerApiCalls.get as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('import', () => {
        it('invokes import without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesImportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.import = stubSimpleCall(expectedResponse);
            const [response] = await client.import(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.import as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes import without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesImportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.import = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.import(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.import as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes import with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesImportRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.import = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.import(request), expectedError);
            assert((client.innerApiCalls.import as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('insert', () => {
        it('invokes insert without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesInsertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.insert = stubSimpleCall(expectedResponse);
            const [response] = await client.insert(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insert as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes insert without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesInsertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.insert = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.insert(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.insert as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes insert with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesInsertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.insert = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.insert(request), expectedError);
            assert((client.innerApiCalls.insert as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('list', () => {
        it('invokes list without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.InstancesListResponse());
            client.innerApiCalls.list = stubSimpleCall(expectedResponse);
            const [response] = await client.list(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.list as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes list without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.InstancesListResponse());
            client.innerApiCalls.list = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.list(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IInstancesListResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.list as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes list with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.list = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.list(request), expectedError);
            assert((client.innerApiCalls.list as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listServerCas', () => {
        it('invokes listServerCas without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListServerCasRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.InstancesListServerCasResponse());
            client.innerApiCalls.listServerCas = stubSimpleCall(expectedResponse);
            const [response] = await client.listServerCas(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServerCas as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServerCas without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListServerCasRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.InstancesListServerCasResponse());
            client.innerApiCalls.listServerCas = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServerCas(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IInstancesListServerCasResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServerCas as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServerCas with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesListServerCasRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServerCas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServerCas(request), expectedError);
            assert((client.innerApiCalls.listServerCas as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('patch', () => {
        it('invokes patch without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPatchRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.patch = stubSimpleCall(expectedResponse);
            const [response] = await client.patch(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes patch without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPatchRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.patch = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.patch(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.patch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes patch with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPatchRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.patch = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.patch(request), expectedError);
            assert((client.innerApiCalls.patch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('promoteReplica', () => {
        it('invokes promoteReplica without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPromoteReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.promoteReplica = stubSimpleCall(expectedResponse);
            const [response] = await client.promoteReplica(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.promoteReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes promoteReplica without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPromoteReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.promoteReplica = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.promoteReplica(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.promoteReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes promoteReplica with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesPromoteReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.promoteReplica = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.promoteReplica(request), expectedError);
            assert((client.innerApiCalls.promoteReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('resetSslConfig', () => {
        it('invokes resetSslConfig without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesResetSslConfigRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.resetSslConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.resetSslConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetSslConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes resetSslConfig without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesResetSslConfigRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.resetSslConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.resetSslConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.resetSslConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes resetSslConfig with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesResetSslConfigRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.resetSslConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.resetSslConfig(request), expectedError);
            assert((client.innerApiCalls.resetSslConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('restart', () => {
        it('invokes restart without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestartRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.restart = stubSimpleCall(expectedResponse);
            const [response] = await client.restart(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restart as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restart without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestartRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.restart = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restart(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restart as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restart with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestartRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restart = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.restart(request), expectedError);
            assert((client.innerApiCalls.restart as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('restoreBackup', () => {
        it('invokes restoreBackup without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.restoreBackup = stubSimpleCall(expectedResponse);
            const [response] = await client.restoreBackup(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes restoreBackup without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.restoreBackup = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreBackup(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.restoreBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes restoreBackup with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreBackup = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.restoreBackup(request), expectedError);
            assert((client.innerApiCalls.restoreBackup as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('rotateServerCa', () => {
        it('invokes rotateServerCa without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.rotateServerCa = stubSimpleCall(expectedResponse);
            const [response] = await client.rotateServerCa(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rotateServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rotateServerCa without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.rotateServerCa = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rotateServerCa(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rotateServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes rotateServerCa with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rotateServerCa = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rotateServerCa(request), expectedError);
            assert((client.innerApiCalls.rotateServerCa as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('startReplica', () => {
        it('invokes startReplica without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.startReplica = stubSimpleCall(expectedResponse);
            const [response] = await client.startReplica(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startReplica without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.startReplica = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startReplica(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startReplica with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startReplica = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startReplica(request), expectedError);
            assert((client.innerApiCalls.startReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('stopReplica', () => {
        it('invokes stopReplica without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStopReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.stopReplica = stubSimpleCall(expectedResponse);
            const [response] = await client.stopReplica(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes stopReplica without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStopReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.stopReplica = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.stopReplica(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.stopReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes stopReplica with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStopReplicaRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.stopReplica = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.stopReplica(request), expectedError);
            assert((client.innerApiCalls.stopReplica as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('truncateLog', () => {
        it('invokes truncateLog without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.truncateLog = stubSimpleCall(expectedResponse);
            const [response] = await client.truncateLog(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.truncateLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes truncateLog without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.truncateLog = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.truncateLog(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.truncateLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes truncateLog with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.truncateLog = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.truncateLog(request), expectedError);
            assert((client.innerApiCalls.truncateLog as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('update', () => {
        it('invokes update without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesUpdateRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.update = stubSimpleCall(expectedResponse);
            const [response] = await client.update(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.update as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes update without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesUpdateRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.update = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.update(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.update as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes update with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesUpdateRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.update = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.update(request), expectedError);
            assert((client.innerApiCalls.update as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createEphemeral', () => {
        it('invokes createEphemeral without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SslCert());
            client.innerApiCalls.createEphemeral = stubSimpleCall(expectedResponse);
            const [response] = await client.createEphemeral(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEphemeral as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createEphemeral without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SslCert());
            client.innerApiCalls.createEphemeral = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createEphemeral(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.ISslCert|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createEphemeral as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createEphemeral with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createEphemeral = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createEphemeral(request), expectedError);
            assert((client.innerApiCalls.createEphemeral as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('rescheduleMaintenance', () => {
        it('invokes rescheduleMaintenance without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.rescheduleMaintenance = stubSimpleCall(expectedResponse);
            const [response] = await client.rescheduleMaintenance(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rescheduleMaintenance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes rescheduleMaintenance without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.rescheduleMaintenance = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.rescheduleMaintenance(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.rescheduleMaintenance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes rescheduleMaintenance with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rescheduleMaintenance = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rescheduleMaintenance(request), expectedError);
            assert((client.innerApiCalls.rescheduleMaintenance as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('verifyExternalSyncSettings', () => {
        it('invokes verifyExternalSyncSettings without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsResponse());
            client.innerApiCalls.verifyExternalSyncSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.verifyExternalSyncSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.verifyExternalSyncSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes verifyExternalSyncSettings without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsResponse());
            client.innerApiCalls.verifyExternalSyncSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.verifyExternalSyncSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.ISqlInstancesVerifyExternalSyncSettingsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.verifyExternalSyncSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes verifyExternalSyncSettings with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.verifyExternalSyncSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.verifyExternalSyncSettings(request), expectedError);
            assert((client.innerApiCalls.verifyExternalSyncSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('startExternalSync', () => {
        it('invokes startExternalSync without error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.startExternalSync = stubSimpleCall(expectedResponse);
            const [response] = await client.startExternalSync(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startExternalSync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes startExternalSync without error using callback', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.sql.v1beta4.Operation());
            client.innerApiCalls.startExternalSync = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startExternalSync(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.sql.v1beta4.IOperation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.startExternalSync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes startExternalSync with error', async () => {
            const client = new sqlinstancesserviceModule.v1beta4.SqlInstancesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest());
            request.project = '';
            const expectedHeaderRequestParams = "project=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.startExternalSync = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.startExternalSync(request), expectedError);
            assert((client.innerApiCalls.startExternalSync as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
